<?xml version="1.0" encoding="UTF-8"?>
<model version="6.2.3" links="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.state-machine.com/qm/qm.xsd">
 <documentation>Dining Philosopher Problem example</documentation>
 <!--${qpc}-->
 <framework name="qpc"/>
 <!--${Shared}-->
 <package name="Shared" stereotype="0x01">
  <!--${Shared::AppSignals}-->
  <attribute name="AppSignals" type="enum" visibility="0x04" properties="0x00">
   <code>{
    EAT_SIG = Q_USER_SIG, // published by Table to let a Philo eat
    DONE_SIG,       // published by Philo when done eating
    PAUSE_SIG,      // published by BSP to pause the application
    SERVE_SIG,      // published by BSP to serve re-start serving forks
    TEST_SIG,       // published by BSP to test the application
    MAX_PUB_SIG,    // the last published signal

    NEW_TIME_SIG,
    START_MEDITATION_SIG,
    MORNING_MEDITATION_START_SIG,
    MORNING_MEDITATION_END_SIG,
    MINUTE_QUARTER_SIG,
    ALARM_SIG,
    TIMEOUT_SIG,    // posted by time event to Philo
    HUNGRY_SIG,     // posted by hungry Philo to Table
    MAX_SIG         // the last signal
};</code>
  </attribute>
  <!--${Shared::produce_sig_dict}-->
  <operation name="produce_sig_dict?def Q_SPY" type="void" visibility="0x00" properties="0x02">
   <code>QS_SIG_DICTIONARY(EAT_SIG,     (void *)0);
QS_SIG_DICTIONARY(DONE_SIG,    (void *)0);
QS_SIG_DICTIONARY(PAUSE_SIG,   (void *)0);
QS_SIG_DICTIONARY(SERVE_SIG,   (void *)0);
QS_SIG_DICTIONARY(TEST_SIG,    (void *)0);

QS_SIG_DICTIONARY(START_MEDITATION_SIG, (void *)0);
QS_SIG_DICTIONARY(MORNING_MEDITATION_START_SIG, (void *)0);
QS_SIG_DICTIONARY(MORNING_MEDITATION_END_SIG, (void *)0);
QS_SIG_DICTIONARY(MINUTE_QUARTER_SIG, (void *)0);
QS_SIG_DICTIONARY(TIMEOUT_SIG, (void *)0);
QS_SIG_DICTIONARY(HUNGRY_SIG,  (void *)0);
QS_SIG_DICTIONARY(NEW_TIME_SIG,  (void *)0);</code>
  </operation>
  <!--${Shared::N_PHILO}-->
  <attribute name="N_PHILO" type="uint8_t" visibility="0x03" properties="0x00">
   <code>((uint8_t)5U)</code>
  </attribute>
  <!--${Shared::TableEvt}-->
  <class name="TableEvt" superclass="qpc::QEvt">
   <!--${Shared::TableEvt::philoId}-->
   <attribute name="philoId" type="uint8_t" visibility="0x00" properties="0x00"/>
   <!--${Shared::TableEvt::ctor}-->
   <operation name="ctor?def QEVT_DYN_CTOR" type="TableEvt *" visibility="0x00" properties="0x02">
    <!--${Shared::TableEvt::ctor::id}-->
    <parameter name="id" type="uint8_t"/>
    <code>if (me != (TableEvt *)0) {
    // don't call QEvt_ctor() because the initialization of all
    // QEvt attributes is already done in QF_QF_newX_()
    me-&gt;philoId = id;
}
return me;</code>
   </operation>
  </class>
  <!--${Shared::AO_Philo[N_PHILO]}-->
  <attribute name="AO_Philo[N_PHILO]" type="QActive * const" visibility="0x00" properties="0x00">
   <code>= {
    &amp;Philo_inst[0].super,
    &amp;Philo_inst[1].super,
    &amp;Philo_inst[2].super,
    &amp;Philo_inst[3].super,
    &amp;Philo_inst[4].super
};</code>
  </attribute>
  <!--${Shared::Philo_ctor}-->
  <operation name="Philo_ctor" type="void" visibility="0x00" properties="0x00">
   <!--${Shared::Philo_ctor::id}-->
   <parameter name="id" type="uint_fast8_t const"/>
   <code>Philo * const me = &amp;Philo_inst[id];
QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;Philo_initial));
QTimeEvt_ctorX(&amp;me-&gt;timeEvt, &amp;me-&gt;super, TIMEOUT_SIG, 0U),
me-&gt;id = (uint8_t)id;</code>
  </operation>
  <!--${Shared::AO_Table}-->
  <attribute name="AO_Table" type="QActive * const" visibility="0x00" properties="0x00">
   <code>= &amp;Table_inst.super;</code>
  </attribute>
  <!--${Shared::Table_ctor}-->
  <operation name="Table_ctor" type="void" visibility="0x00" properties="0x00">
   <code>Table * const me = &amp;Table_inst;
QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;Table_initial));
for (uint8_t n = 0U; n &lt; N_PHILO; ++n) {
    me-&gt;fork[n] = FREE;
    me-&gt;isHungry[n] = false;
}</code>
  </operation>
  <!--${Shared::Meditation_ctor}-->
  <operation name="Meditation_ctor" type="void" visibility="0x00" properties="0x00">
   <code>Meditation * const me = &amp;Meditation_inst;
QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;Meditation_initial));
QTimeEvt_ctorX(&amp;me-&gt;timeEvt, &amp;me-&gt;super, TIMEOUT_SIG, 0U);</code>
  </operation>
  <!--${Shared::AO_Meditation}-->
  <attribute name="AO_Meditation" type="QActive * const" visibility="0x00" properties="0x00">
   <code>= &amp;Meditation_inst.super;</code>
  </attribute>
  <!--${Shared::NewTimeEvt}-->
  <class name="NewTimeEvt" superclass="qpc::QEvt">
   <!--${Shared::NewTimeEvt::hours}-->
   <attribute name="hours" type="uint8_t" visibility="0x00" properties="0x00"/>
   <!--${Shared::NewTimeEvt::minutes}-->
   <attribute name="minutes" type="uint8_t" visibility="0x00" properties="0x00"/>
   <!--${Shared::NewTimeEvt::seconds}-->
   <attribute name="seconds" type="uint8_t" visibility="0x00" properties="0x00"/>
  </class>
  <!--${Shared::QuarterEvt}-->
  <class name="QuarterEvt" superclass="qpc::QEvt">
   <!--${Shared::QuarterEvt::quarter}-->
   <attribute name="quarter" type="uint8_t" visibility="0x00" properties="0x00"/>
  </class>
 </package>
 <!--${AOs}-->
 <package name="AOs" stereotype="0x02">
  <!--${AOs::Philo}-->
  <class name="Philo" superclass="qpc::QActive">
   <documentation>The Philo AO and the N_PHILO instances</documentation>
   <!--${AOs::Philo::timeEvt}-->
   <attribute name="timeEvt" type="QTimeEvt" visibility="0x02" properties="0x00"/>
   <!--${AOs::Philo::id}-->
   <attribute name="id" type="uint8_t" visibility="0x02" properties="0x00"/>
   <!--${AOs::Philo::inst[N_PHILO]}-->
   <attribute name="inst[N_PHILO]" type="Philo" visibility="0x00" properties="0x01"/>
   <!--${AOs::Philo::SM}-->
   <statechart properties="0x02">
    <!--${AOs::Philo::SM::initial}-->
    <initial target="../1">
     <action>Q_UNUSED_PAR(par);

QS_OBJ_ARR_DICTIONARY(&amp;Philo_inst[me-&gt;id], me-&gt;id);
QS_OBJ_ARR_DICTIONARY(&amp;Philo_inst[me-&gt;id].timeEvt, me-&gt;id);

QActive_subscribe(&amp;me-&gt;super, EAT_SIG);
QActive_subscribe(&amp;me-&gt;super, TEST_SIG);</action>
     <initial_glyph conn="2,4,5,1,20,7,-2">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <!--${AOs::Philo::SM::thinking}-->
    <state name="thinking">
     <entry>QTimeEvt_armX(&amp;me-&gt;timeEvt, think_time(), 0U);</entry>
     <exit>(void)QTimeEvt_disarm(&amp;me-&gt;timeEvt);</exit>
     <!--${AOs::Philo::SM::thinking::TIMEOUT}-->
     <tran trig="TIMEOUT" target="../../2">
      <tran_glyph conn="2,16,3,1,20,14,-2">
       <action box="0,-2,12,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::Philo::SM::thinking::EAT, DONE}-->
     <tran trig="EAT, DONE">
      <action>// EAT or DONE must be for other Philos than this one
Q_ASSERT(Q_EVT_CAST(TableEvt)-&gt;philoId != me-&gt;id);</action>
      <tran_glyph conn="2,20,3,-1,14">
       <action box="0,-2,14,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::Philo::SM::thinking::TEST}-->
     <tran trig="TEST">
      <tran_glyph conn="2,24,3,-1,14">
       <action box="0,-2,11,4"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,6,18,20">
      <entry box="1,2,5,2"/>
      <exit box="1,4,5,2"/>
     </state_glyph>
    </state>
    <!--${AOs::Philo::SM::hungry}-->
    <state name="hungry">
     <entry>#ifdef QEVT_DYN_CTOR
TableEvt const *pe = Q_NEW(TableEvt, HUNGRY_SIG, me-&gt;id);
#else
TableEvt *pe = Q_NEW(TableEvt, HUNGRY_SIG);
pe-&gt;philoId = me-&gt;id;
#endif
QACTIVE_POST(AO_Table, &amp;pe-&gt;super, &amp;me-&gt;super);</entry>
     <!--${AOs::Philo::SM::hungry::EAT}-->
     <tran trig="EAT">
      <!--${AOs::Philo::SM::hungry::EAT::[e->philoId==me->iid]}-->
      <choice target="../../../3">
       <guard brief="e-&gt;philoId == me-&gt;iid">Q_EVT_CAST(TableEvt)-&gt;philoId == me-&gt;id</guard>
       <choice_glyph conn="10,36,5,1,12,10,-2">
        <action box="1,0,23,6"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="2,36,3,-1,8">
       <action box="0,-2,14,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::Philo::SM::hungry::DONE}-->
     <tran trig="DONE">
      <action>// DONE must be for other Philos than this one
Q_ASSERT(Q_EVT_CAST(TableEvt)-&gt;philoId != me-&gt;id);</action>
      <tran_glyph conn="2,40,3,-1,14">
       <action box="0,-2,14,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,28,18,14">
      <entry box="1,2,5,2"/>
     </state_glyph>
    </state>
    <!--${AOs::Philo::SM::eating}-->
    <state name="eating">
     <entry>QTimeEvt_armX(&amp;me-&gt;timeEvt, eat_time(), 0U);</entry>
     <exit>(void)QTimeEvt_disarm(&amp;me-&gt;timeEvt);

#ifdef QEVT_DYN_CTOR
TableEvt const *pe = Q_NEW(TableEvt, DONE_SIG, me-&gt;id);
#else
TableEvt *pe = Q_NEW(TableEvt, DONE_SIG);
pe-&gt;philoId = me-&gt;id;
#endif
QACTIVE_PUBLISH(&amp;pe-&gt;super, &amp;me-&gt;super);</exit>
     <!--${AOs::Philo::SM::eating::TIMEOUT}-->
     <tran trig="TIMEOUT" target="../../1">
      <tran_glyph conn="2,54,3,1,22,-41,-4">
       <action box="0,-2,13,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::Philo::SM::eating::EAT, DONE}-->
     <tran trig="EAT, DONE">
      <action>// EAT or DONE must be for other Philos than this one
Q_ASSERT(Q_EVT_CAST(TableEvt)-&gt;philoId != me-&gt;id);</action>
      <tran_glyph conn="2,58,3,-1,14">
       <action box="0,-2,14,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,44,18,18">
      <entry box="1,2,5,2"/>
      <exit box="1,4,5,2"/>
     </state_glyph>
    </state>
    <state_diagram size="36,64"/>
   </statechart>
  </class>
  <!--${AOs::Table}-->
  <class name="Table" superclass="qpc::QActive">
   <!--${AOs::Table::fork[N_PHILO]}-->
   <attribute name="fork[N_PHILO]" type="uint8_t" visibility="0x02" properties="0x00"/>
   <!--${AOs::Table::isHungry[N_PHILO]}-->
   <attribute name="isHungry[N_PHILO]" type="bool" visibility="0x02" properties="0x00"/>
   <!--${AOs::Table::inst}-->
   <attribute name="inst" type="Table" visibility="0x00" properties="0x01"/>
   <!--${AOs::Table::SM}-->
   <statechart properties="0x02">
    <!--${AOs::Table::SM::initial}-->
    <initial target="../1/2">
     <action>Q_UNUSED_PAR(par);

#ifdef Q_SPY
Table *Table_inst = me;
QS_OBJ_DICTIONARY(Table_inst);
#endif

QActive_subscribe(&amp;me-&gt;super, DONE_SIG);
QActive_subscribe(&amp;me-&gt;super, PAUSE_SIG);
QActive_subscribe(&amp;me-&gt;super, SERVE_SIG);
QActive_subscribe(&amp;me-&gt;super, TEST_SIG);

for (uint8_t n = 0U; n &lt; N_PHILO; ++n) {
    me-&gt;fork[n] = FREE;
    me-&gt;isHungry[n] = false;
    BSP_displayPhilStat(n, THINKING);
}</action>
     <initial_glyph conn="2,4,5,1,46,20,-10">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <!--${AOs::Table::SM::active}-->
    <state name="active">
     <!--${AOs::Table::SM::active::TEST}-->
     <tran trig="TEST">
      <tran_glyph conn="2,12,3,-1,14">
       <action box="0,-2,11,4"/>
      </tran_glyph>
     </tran>
     <!--${AOs::Table::SM::active::EAT}-->
     <tran trig="EAT">
      <action>Q_ERROR();</action>
      <tran_glyph conn="2,16,3,-1,14">
       <action box="0,-2,10,4"/>
      </tran_glyph>
     </tran>
     <!--${AOs::Table::SM::active::serving}-->
     <state name="serving">
      <entry brief="give pending permissions to eat">// give permissions to eat...
for (uint8_t n = 0U; n &lt; N_PHILO; ++n) {
    if (me-&gt;isHungry[n]
        &amp;&amp; (me-&gt;fork[left(n)] == FREE)
        &amp;&amp; (me-&gt;fork[n] == FREE))
    {
        me-&gt;fork[left(n)] = USED;
        me-&gt;fork[n] = USED;
#ifdef QEVT_DYN_CTOR
        TableEvt const *pe = Q_NEW(TableEvt, EAT_SIG, n);
#else
        TableEvt *pe = Q_NEW(TableEvt, EAT_SIG);
        pe-&gt;philoId = n;
#endif
        QACTIVE_PUBLISH(&amp;pe-&gt;super, &amp;me-&gt;super);
        me-&gt;isHungry[n] = false;
        BSP_displayPhilStat(n, EATING);
    }
}</entry>
      <!--${AOs::Table::SM::active::serving::HUNGRY}-->
      <tran trig="HUNGRY">
       <action>uint8_t n = Q_EVT_CAST(TableEvt)-&gt;philoId;

// phil ID must be in range and he must be not hungry
Q_ASSERT((n &lt; N_PHILO) &amp;&amp; (!me-&gt;isHungry[n]));

BSP_displayPhilStat(n, HUNGRY);
uint8_t m = left(n);</action>
       <!--${AOs::Table::SM::active::serving::HUNGRY::[bothfree]}-->
       <choice>
        <guard brief="both free">(me-&gt;fork[m] == FREE) &amp;&amp; (me-&gt;fork[n] == FREE)</guard>
        <action>me-&gt;fork[m] = USED;
me-&gt;fork[n] = USED;
#ifdef QEVT_DYN_CTOR
TableEvt const *pe = Q_NEW(TableEvt, EAT_SIG, n);
#else
TableEvt *pe = Q_NEW(TableEvt, EAT_SIG);
pe-&gt;philoId = n;
#endif
QACTIVE_PUBLISH(&amp;pe-&gt;super, &amp;me-&gt;super);
BSP_displayPhilStat(n, EATING);</action>
        <choice_glyph conn="20,28,5,-1,12">
         <action box="1,0,10,2"/>
        </choice_glyph>
       </choice>
       <!--${AOs::Table::SM::active::serving::HUNGRY::[else]}-->
       <choice>
        <guard>else</guard>
        <action>me-&gt;isHungry[n] = true;</action>
        <choice_glyph conn="20,28,4,-1,4,12">
         <action box="1,4,6,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="4,28,3,-1,16">
        <action box="0,-2,8,2"/>
       </tran_glyph>
      </tran>
      <!--${AOs::Table::SM::active::serving::DONE}-->
      <tran trig="DONE">
       <action>uint8_t n = Q_EVT_CAST(TableEvt)-&gt;philoId;

// phil ID must be in range and he must be not hungry
Q_ASSERT((n &lt; N_PHILO) &amp;&amp; (!me-&gt;isHungry[n]));

BSP_displayPhilStat(n, THINKING);
uint8_t m = left(n);

// both forks of Phil[n] must be used
Q_ASSERT((me-&gt;fork[n] == USED) &amp;&amp; (me-&gt;fork[m] == USED));

me-&gt;fork[m] = FREE;
me-&gt;fork[n] = FREE;
m = right(n); // check the right neighbor

if (me-&gt;isHungry[m] &amp;&amp; (me-&gt;fork[m] == FREE)) {
    me-&gt;fork[n] = USED;
    me-&gt;fork[m] = USED;
    me-&gt;isHungry[m] = false;
#ifdef QEVT_DYN_CTOR
    TableEvt const *pe = Q_NEW(TableEvt, EAT_SIG, m);
#else
    TableEvt *pe = Q_NEW(TableEvt, EAT_SIG);
    pe-&gt;philoId = m;
#endif
    QACTIVE_PUBLISH(&amp;pe-&gt;super, &amp;me-&gt;super);
    BSP_displayPhilStat(m, EATING);
}
m = left(n); // check the left neighbor
n = left(m); // left fork of the left neighbor
if (me-&gt;isHungry[m] &amp;&amp; (me-&gt;fork[n] == FREE)) {
    me-&gt;fork[m] = USED;
    me-&gt;fork[n] = USED;
    me-&gt;isHungry[m] = false;
#ifdef QEVT_DYN_CTOR
    TableEvt const *pe = Q_NEW(TableEvt, EAT_SIG, m);
#else
    TableEvt *pe = Q_NEW(TableEvt, EAT_SIG);
    pe-&gt;philoId = m;
#endif
    QACTIVE_PUBLISH(&amp;pe-&gt;super, &amp;me-&gt;super);
    BSP_displayPhilStat(m, EATING);
}</action>
       <tran_glyph conn="4,36,3,-1,16">
        <action box="0,-2,6,2"/>
       </tran_glyph>
      </tran>
      <!--${AOs::Table::SM::active::serving::EAT}-->
      <tran trig="EAT">
       <action>Q_ERROR();</action>
       <tran_glyph conn="4,40,3,-1,16">
        <action box="0,-2,12,4"/>
       </tran_glyph>
      </tran>
      <!--${AOs::Table::SM::active::serving::PAUSE}-->
      <tran trig="PAUSE" target="../../3">
       <tran_glyph conn="4,44,3,1,36,8,-2">
        <action box="0,-2,7,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="4,20,34,26">
       <entry box="1,2,27,2"/>
      </state_glyph>
     </state>
     <!--${AOs::Table::SM::active::paused}-->
     <state name="paused">
      <entry>BSP_displayPaused(1U);</entry>
      <exit>BSP_displayPaused(0U);</exit>
      <!--${AOs::Table::SM::active::paused::SERVE}-->
      <tran trig="SERVE" target="../../2">
       <tran_glyph conn="4,62,3,1,38,-31,-4">
        <action box="0,-2,7,2"/>
       </tran_glyph>
      </tran>
      <!--${AOs::Table::SM::active::paused::HUNGRY}-->
      <tran trig="HUNGRY">
       <action>uint8_t n = Q_EVT_CAST(TableEvt)-&gt;philoId;

// philo ID must be in range and he must be not hungry
Q_ASSERT((n &lt; N_PHILO) &amp;&amp; (!me-&gt;isHungry[n]));

me-&gt;isHungry[n] = true;
BSP_displayPhilStat(n, HUNGRY);</action>
       <tran_glyph conn="4,66,3,-1,16">
        <action box="0,-2,6,2"/>
       </tran_glyph>
      </tran>
      <!--${AOs::Table::SM::active::paused::DONE}-->
      <tran trig="DONE">
       <action>uint8_t n = Q_EVT_CAST(TableEvt)-&gt;philoId;

// phil ID must be in range and he must be not hungry
Q_ASSERT((n &lt; N_PHILO) &amp;&amp; (!me-&gt;isHungry[n]));

BSP_displayPhilStat(n, THINKING);
uint8_t m = left(n);

// both forks of Phil[n] must be used
Q_ASSERT((me-&gt;fork[n] == USED) &amp;&amp; (me-&gt;fork[m] == USED));

me-&gt;fork[m] = FREE;
me-&gt;fork[n] = FREE;</action>
       <tran_glyph conn="4,70,3,-1,16">
        <action box="0,-2,6,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="4,48,34,24">
       <entry box="1,2,18,4"/>
       <exit box="1,6,18,4"/>
      </state_glyph>
     </state>
     <state_glyph node="2,6,44,68"/>
    </state>
    <state_diagram size="50,76"/>
   </statechart>
  </class>
  <!--${AOs::Meditation}-->
  <class name="Meditation" superclass="qpc::QActive">
   <!--${AOs::Meditation::timeEvt}-->
   <attribute name="timeEvt" type="QTimeEvt" visibility="0x02" properties="0x00"/>
   <!--${AOs::Meditation::inst}-->
   <attribute name="inst" type="Meditation" visibility="0x00" properties="0x01"/>
   <!--${AOs::Meditation::alarm}-->
   <attribute name="alarm" type="struct tm" visibility="0x01" properties="0x00"/>
   <!--${AOs::Meditation::current_quarter}-->
   <attribute name="current_quarter" type="uint8_t" visibility="0x01" properties="0x00"/>
   <!--${AOs::Meditation::current_hour}-->
   <attribute name="current_hour" type="uint8_t" visibility="0x01" properties="0x00"/>
   <!--${AOs::Meditation::alarm_goes_off_in}-->
   <operation name="alarm_goes_off_in" type="void" visibility="0x01" properties="0x00">
    <documentation>Add seconds to struct tm</documentation>
    <!--${AOs::Meditation::alarm_goes_off_i~::seconds_in_future}-->
    <parameter name="seconds_in_future" type="uint32_t"/>
    <code>struct tm t = BSP_getTime();

time_t secs = (t.tm_hour * 60 * 60) + (t.tm_min * 60) + t.tm_sec;

secs += seconds_in_future;;

me-&gt;alarm = *localtime(&amp;secs);    // save it

QS_BEGIN_ID(100, 0U)
        QS_STR(__func__);     // String function
        QS_U8(1, me-&gt;alarm.tm_hour);         // Hours
        QS_U8(1, me-&gt;alarm.tm_min);         // Minutes
        QS_U8(1, me-&gt;alarm.tm_sec);  // Seconds
QS_END()</code>
   </operation>
   <!--${AOs::Meditation::SM}-->
   <statechart properties="0x02">
    <!--${AOs::Meditation::SM::initial}-->
    <initial target="../1">
     <action>Q_UNUSED_PAR(par);

#ifdef Q_SPY
    Meditation * Meditation_inst = me;
    QS_OBJ_DICTIONARY(Meditation_inst);

    QTimeEvt * Meditation_timeEvt = &amp;me-&gt;timeEvt;
    QS_OBJ_DICTIONARY(Meditation_timeEvt);
#endif
</action>
     <initial_glyph conn="2,4,5,0,27,6">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <!--${AOs::Meditation::SM::get_time}-->
    <state name="get_time">
     <entry brief="arm-timer/led-off">QTimeEvt_armX(&amp;me-&gt;timeEvt, BSP_TICKS_PER_SEC, BSP_TICKS_PER_SEC);
BSP_ledOff();</entry>
     <exit brief="disarm-timer">(void)QTimeEvt_disarm(&amp;me-&gt;timeEvt);</exit>
     <!--${AOs::Meditation::SM::get_time::TIMEOUT}-->
     <tran trig="TIMEOUT">
      <action brief="read-time/post-event-to-self">struct tm t = BSP_getTime();

me-&gt;current_hour = (t.tm_hour == 12) ? 12 : t.tm_hour % 12;
me-&gt;current_quarter = (t.tm_min == 0) ? 4 : (t.tm_min / 15);

if ((t.tm_hour &gt;= 5) &amp;&amp; (t.tm_hour &lt; 7))
{
    // morning meditation start
    static QEvt const evt1 = QEVT_INITIALIZER(MORNING_MEDITATION_START_SIG);
    QACTIVE_POST(&amp;me-&gt;super, &amp;evt1, me);
}

if ((t.tm_sec &lt;= 1) &amp;&amp;
    ((t.tm_min == 15) || (t.tm_min == 30) || (t.tm_min == 45)) ||
    ((t.tm_sec &lt;= 1) &amp;&amp; (t.tm_min == 0)))
{
    // minute_quarter (0, 15, 30, 45)
    static QEvt const evt3 = QEVT_INITIALIZER(MINUTE_QUARTER_SIG);
    QACTIVE_POST(&amp;me-&gt;super, &amp;evt3, me);
}

if ((t.tm_hour &lt; 5) || (t.tm_hour &gt;= 7))
{
    // morning meditation end
    static QEvt const evt2 = QEVT_INITIALIZER(MORNING_MEDITATION_END_SIG);
    QACTIVE_POST(&amp;me-&gt;super, &amp;evt2, me);
}

if (
    (t.tm_sec == me-&gt;alarm.tm_sec) &amp;&amp;
    (t.tm_min == me-&gt;alarm.tm_min) &amp;&amp;
    (t.tm_hour == me-&gt;alarm.tm_hour)
    )
{
    // alarm
    static QEvt const evt5 = QEVT_INITIALIZER(ALARM_SIG);
    QACTIVE_POST(&amp;me-&gt;super, &amp;evt5, me);
}
</action>
      <tran_glyph conn="5,23,3,-1,14">
       <action box="0,-2,29,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::Meditation::SM::get_time::NEW_TIME}-->
     <tran trig="NEW_TIME">
      <action brief="rtc-set">const NewTimeEvt* evt = Q_EVT_CAST(NewTimeEvt);
struct tm time;

time.tm_hour = evt-&gt;hours;
time.tm_min = evt-&gt;minutes;
time.tm_sec = evt-&gt;seconds;

BSP_setTime(time);</action>
      <tran_glyph conn="5,41,3,-1,14">
       <action box="0,-2,16,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::Meditation::SM::get_time::START_MEDITATION}-->
     <tran trig="START_MEDITATION" target="../5">
      <tran_glyph conn="5,47,3,3,17">
       <action box="0,-2,16,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::Meditation::SM::get_time::MORNING_MEDITATION_START}-->
     <tran trig="MORNING_MEDITATION_START" target="../4">
      <tran_glyph conn="5,26,3,3,34">
       <action box="0,-2,25,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::Meditation::SM::get_time::meditation_until_7}-->
     <state name="meditation_until_7">
      <entry brief="lights-on">BSP_ledOn();</entry>
      <exit brief="lights-off">BSP_ledOff();</exit>
      <!--${AOs::Meditation::SM::get_time::meditation_until~::MORNING_MEDITATION_END}-->
      <tran trig="MORNING_MEDITATION_END" target="../..">
       <tran_glyph conn="39,29,3,3,-34">
        <action box="-22,-2,23,2"/>
       </tran_glyph>
      </tran>
      <!--${AOs::Meditation::SM::get_time::meditation_until~::MINUTE_QUARTER}-->
      <tran trig="MINUTE_QUARTER">
       <action brief="play-audio">BSP_playAudio(me-&gt;current_quarter, me-&gt;current_hour);</action>
       <tran_glyph conn="39,23,3,-1,13">
        <action box="0,-2,24,2"/>
       </tran_glyph>
      </tran>
      <!--${AOs::Meditation::SM::get_time::meditation_until~::MORNING_MEDITATION_START}-->
      <tran trig="MORNING_MEDITATION_START">
       <tran_glyph conn="86,22,1,-1,-18">
        <action box="-23,1,23,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="39,14,47,20">
       <entry box="1,2,17,2"/>
       <exit box="1,4,11,2"/>
      </state_glyph>
     </state>
     <!--${AOs::Meditation::SM::get_time::meditation_for_90_mins}-->
     <state name="meditation_for_90_mins">
      <entry brief="led-on">BSP_ledOn();</entry>
      <exit brief="led-off">BSP_ledOff();</exit>
      <!--${AOs::Meditation::SM::get_time::meditation_for_9~::initial}-->
      <initial target="../6">
       <action brief="set-alarm">Meditation_alarm_goes_off_in(me, 15*60);</action>
       <initial_glyph conn="25,60,5,2,3,-4">
        <action box="3,-2,11,3"/>
       </initial_glyph>
      </initial>
      <!--${AOs::Meditation::SM::get_time::meditation_for_9~::MORNING_MEDITATION_START}-->
      <tran trig="MORNING_MEDITATION_START">
       <tran_glyph conn="22,66,3,-1,10">
        <action box="0,-2,25,2"/>
       </tran_glyph>
      </tran>
      <!--${AOs::Meditation::SM::get_time::meditation_for_9~::state15m}-->
      <state name="state15m">
       <entry brief="audio">BSP_playAudio(First, me-&gt;current_hour);</entry>
       <!--${AOs::Meditation::SM::get_time::meditation_for_9~::state15m::ALARM}-->
       <tran trig="ALARM" target="../../3">
        <action brief="arm">Meditation_alarm_goes_off_in(me, 15*60);</action>
        <tran_glyph conn="48,54,1,3,4">
         <action box="-10,-1,11,4"/>
        </tran_glyph>
       </tran>
       <state_glyph node="37,47,11,9">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <!--${AOs::Meditation::SM::get_time::meditation_for_9~::state30m}-->
      <state name="state30m">
       <entry brief="audio">BSP_playAudio(Second, me-&gt;current_hour);</entry>
       <!--${AOs::Meditation::SM::get_time::meditation_for_9~::state30m::ALARM}-->
       <tran trig="ALARM" target="../../4">
        <action brief="arm">Meditation_alarm_goes_off_in(me, 15*60);</action>
        <tran_glyph conn="63,54,1,3,3">
         <action box="-10,-1,10,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="52,47,11,9">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <!--${AOs::Meditation::SM::get_time::meditation_for_9~::state45m}-->
      <state name="state45m">
       <entry brief="audio">BSP_playAudio(Third, me-&gt;current_hour);</entry>
       <!--${AOs::Meditation::SM::get_time::meditation_for_9~::state45m::ALARM}-->
       <tran trig="ALARM" target="../../5">
        <action brief="arm">Meditation_alarm_goes_off_in(me, 15*60);</action>
        <tran_glyph conn="72,56,2,0,2">
         <action box="-5,-3,11,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="66,47,12,9">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <!--${AOs::Meditation::SM::get_time::meditation_for_9~::state1h}-->
      <state name="state1h">
       <entry brief="audio">BSP_playAudio(Fourth, me-&gt;current_hour);</entry>
       <!--${AOs::Meditation::SM::get_time::meditation_for_9~::state1h::ALARM}-->
       <tran trig="ALARM" target="../../7">
        <action brief="arm">Meditation_alarm_goes_off_in(me, 15*60);</action>
        <tran_glyph conn="67,63,3,1,-4">
         <action box="-3,1,12,3"/>
        </tran_glyph>
       </tran>
       <state_glyph node="67,58,12,9">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <!--${AOs::Meditation::SM::get_time::meditation_for_9~::stateStart}-->
      <state name="stateStart">
       <entry brief="audio">BSP_playAudio(Fourth, me-&gt;current_hour);</entry>
       <!--${AOs::Meditation::SM::get_time::meditation_for_9~::stateStart::ALARM}-->
       <tran trig="ALARM" target="../../2">
        <action brief="arm">Meditation_alarm_goes_off_in(me, 15*60);</action>
        <tran_glyph conn="23,54,3,3,14">
         <action box="0,-2,11,4"/>
        </tran_glyph>
       </tran>
       <state_glyph node="23,47,11,9">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <!--${AOs::Meditation::SM::get_time::meditation_for_9~::state1h15m}-->
      <state name="state1h15m">
       <entry brief="audio">BSP_playAudio(First, me-&gt;current_hour);</entry>
       <exit brief="audio">BSP_playAudio(Second, me-&gt;current_hour);</exit>
       <!--${AOs::Meditation::SM::get_time::meditation_for_9~::state1h15m::ALARM}-->
       <tran trig="ALARM" target="../../..">
        <tran_glyph conn="57,67,2,2,11">
         <action box="1,1,11,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="51,58,12,9">
        <entry box="1,2,6,2"/>
        <exit box="1,4,7,3"/>
       </state_glyph>
      </state>
      <state_glyph node="22,38,59,32">
       <entry box="1,2,14,2"/>
       <exit box="1,4,13,2"/>
      </state_glyph>
     </state>
     <state_glyph node="5,10,84,68">
      <entry box="1,2,15,2"/>
      <exit box="1,4,11,2"/>
     </state_glyph>
    </state>
    <state_diagram size="104,120"/>
   </statechart>
  </class>
 </package>
 <!--${.}-->
 <directory name=".">
  <!--${.::dpp.h}-->
  <file name="dpp.h">
   <text>#ifndef DPP_H_
#define DPP_H_

$declare ${Shared}

#ifdef QXK_H_

extern QXThread * const TH_XThread1;
void XThread1_ctor(void);

extern QXThread * const TH_XThread2;
void XThread2_ctor(void);

extern QXSemaphore TH_sema;
extern QXMutex TH_mutex;

#endif // QXK_H_

#endif // DPP_H_</text>
  </file>
  <!--${.::philo.c}-->
  <file name="philo.c">
   <text>#include &quot;qpc.h&quot;               // QP/C real-time embedded framework
#include &quot;dpp.h&quot;               // DPP Application interface
#include &quot;bsp.h&quot;               // Board Support Package

$declare ${AOs::Philo}

//----------------------------------------------------------------------------
Q_DEFINE_THIS_FILE

// helper function to provide a randomized think time for Philos
static QTimeEvtCtr think_time(void); // prototype
static inline QTimeEvtCtr think_time(void) {
    return (QTimeEvtCtr)((BSP_random() % BSP_TICKS_PER_SEC)
                                        + (BSP_TICKS_PER_SEC/2U));
}

// helper function to provide a randomized eat time for Philos
static QTimeEvtCtr eat_time(void); // prototype
static inline QTimeEvtCtr eat_time(void) {
    return (QTimeEvtCtr)((BSP_random() % BSP_TICKS_PER_SEC)
                                        + BSP_TICKS_PER_SEC);
}
//----------------------------------------------------------------------------

$define ${Shared::Philo_ctor}
$define ${Shared::AO_Philo[N_PHILO]}
$define ${AOs::Philo}</text>
  </file>
  <!--${.::table.c}-->
  <file name="table.c">
   <text>#include &quot;qpc.h&quot;               // QP/C real-time embedded framework
#include &quot;dpp.h&quot;               // DPP Application interface
#include &quot;bsp.h&quot;               // Board Support Package

$declare ${AOs::Table}

//----------------------------------------------------------------------------
Q_DEFINE_THIS_FILE

// helper function to provide the RIGHT neighbor of a Philo[n]
static inline uint8_t right(uint8_t const n) {
    return (uint8_t)((n + (N_PHILO - 1U)) % N_PHILO);
}

// helper function to provide the LEFT neighbor of a Philo[n]
static inline uint8_t left(uint8_t const n) {
    return (uint8_t)((n + 1U) % N_PHILO);
}

#define FREE ((uint8_t)0U)
#define USED ((uint8_t)1U)

#define THINKING &quot;thinking&quot;
#define HUNGRY   &quot;hungry  &quot;
#define EATING   &quot;eating  &quot;

//----------------------------------------------------------------------------

$define ${Shared::Table_ctor}
$define ${Shared::AO_Table}
$define ${AOs::Table}</text>
  </file>
  <!--${.::meditation.c}-->
  <file name="meditation.c">
   <text>#include &quot;qpc.h&quot;               // QP/C real-time embedded framework
#include &quot;dpp.h&quot;               // DPP Application interface
#include &quot;bsp.h&quot;               // Board Support Package
#include &lt;time.h&gt;

$declare ${AOs::Meditation}

//----------------------------------------------------------------------------
Q_DEFINE_THIS_FILE

$define ${Shared::Meditation_ctor}
$define ${Shared::AO_Meditation}
$define ${AOs::Meditation}</text>
  </file>
 </directory>
</model>
